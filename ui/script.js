const loginForm = document.getElementById("login-form");
const loginSection = document.getElementById("login-section");
const quizSection = document.getElementById("quiz-section");
const resultSection = document.getElementById("result-section");
const analysisSection = document.getElementById("analysis-section");
const tracker = document.getElementById("tracker");
const questionBox = document.getElementById("question-box");
const nextBtn = document.getElementById("next-btn");
const analyzeBtn = document.getElementById("analyze-btn");
const retakeBtn = document.getElementById("retake-btn");
const backToLoginBtn = document.getElementById("back-to-login");

// API Configuration
const API_BASE_URL = 'http://localhost:8000';
let currentUserId = null;
let questions = [];
let currentQ = 0;
let score = 7;
let userAnswers = [];
let skillPerformance = {};
let currentLanguage = 'en';
let quizStartTime = null;

// Make questions globally accessible for language switching
window.currentQuestions = questions;
window.currentQuestionIndex = currentQ;

// API Functions
async function fetchQuestions(language = 'en') {
    try {
        const response = await fetch(`${API_BASE_URL}/quiz/questions/${language}`);
        const data = await response.json();
        questions = data.questions;
        window.currentQuestions = questions;
        return questions;
    } catch (error) {
        console.error('Error fetching questions:', error);
        return [];
    }
}

async function submitProfile(profileData) {
    try {
        const response = await fetch(`${API_BASE_URL}/profile`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(profileData)
        });
        const data = await response.json();
        currentUserId = data.user_id;
        localStorage.setItem('currentUserId', currentUserId);
        return data;
    } catch (error) {
        console.error('Error submitting profile:', error);
        throw error;
    }
}

async function submitQuizResults() {
    try {
        const submission = {
            user_id: currentUserId,
            answers: userAnswers.map(answer => ({
                question_id: answer.questionIndex + 1,
                selected_answer: answer.selectedAnswer,
                time_taken: answer.timeTaken || 0
            })),
            total_time: Date.now() - quizStartTime
        };

        const response = await fetch(`${API_BASE_URL}/quiz/submit`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(submission)
        });
        
        const data = await response.json();
        localStorage.setItem('quizResults', JSON.stringify(data));
        return data;
    } catch (error) {
        console.error('Error submitting quiz results:', error);
        throw error;
    }
}

async function chatWithBot(message) {
    try {
        const response = await fetch(`${API_BASE_URL}/chat`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                user_id: currentUserId || 'anonymous'
            })
        });
        
        const data = await response.json();
        return data.response;
    } catch (error) {
        console.error('Error chatting with bot:', error);
        return "I'm sorry, I'm having trouble connecting to the server right now.";
    }
}

// Event Listeners
loginForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    
    try {
        // Create user profile
        const profileData = {
            name: email.split('@')[0], // Use email prefix as name
            age: 25, // Default age
            goal: "Improve digital skills",
            experience: "Beginner"
        };
        
        await submitProfile(profileData);
        
        // Load questions
        await fetchQuestions(currentLanguage);
        
        // Start quiz
        loginSection.style.display = "none";
        quizSection.style.display = "block";
        quizStartTime = Date.now();
        loadQuestion();
    } catch (error) {
        alert("Error starting quiz. Please try again.");
        console.error('Login error:', error);
    }
});

nextBtn.addEventListener("click", async () => {
    const selected = document.querySelector('input[name="option"]:checked');
    if (selected) {
        const selectedIndex = parseInt(selected.value);
        const questionStartTime = Date.now() - quizStartTime;
        
        userAnswers.push({
            questionIndex: currentQ,
            selectedAnswer: selectedIndex,
            isCorrect: selectedIndex === questions[currentQ].correct,
            skill: questions[currentQ].skill,
            difficulty: questions[currentQ].difficulty,
            timeTaken: questionStartTime
        });
        
        if (selectedIndex === questions[currentQ].correct) score++;
        
        currentQ++;
        window.currentQuestionIndex = currentQ;
        
        if (currentQ < questions.length) {
            loadQuestion();
        } else {
            // Submit results to backend
            try {
                const results = await submitQuizResults();
                localStorage.setItem('quizResults', JSON.stringify(results));
                window.location.href = 'digital-skills-analyzer.html';
            } catch (error) {
                alert("Error submitting results. Please try again.");
                console.error('Submission error:', error);
            }
        }
    } else {
        const currentLang = localStorage.getItem('selectedLanguage') || 'en';
        const alertMessage = currentLang === 'hi' ? "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§è‡§ï ‡§â‡§§‡•ç‡§§‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§" : "Please select an answer before continuing.";
        alert(alertMessage);
    }
});

analyzeBtn.addEventListener("click", () => {
    resultSection.style.display = "none";
    analysisSection.style.display = "block";
    performSkillGapAnalysis();
});

retakeBtn.addEventListener("click", () => {
    resetQuiz();
    analysisSection.style.display = "none";
    quizSection.style.display = "block";
    loadQuestion();
});

backToLoginBtn.addEventListener("click", () => {
    resetQuiz();
    analysisSection.style.display = "none";
    loginSection.style.display = "block";
});

function loadQuestion() {
    if (questions.length === 0) {
        console.error('No questions loaded');
        return;
    }
    
    const currentLang = localStorage.getItem('selectedLanguage') || 'en';
    const q = questions[currentQ];
    tracker.textContent = `${currentQ + 1}`;
    tracker.style.background = `conic-gradient(red ${(currentQ + 1) / questions.length * 100}%, #333 ${(currentQ + 1) / questions.length * 100}%)`;
    
    displayQuestion(q, currentLang);
}

function displayQuestion(question, lang = 'en') {
    const questionText = question.question;
    const options = question.options;
    
    questionBox.innerHTML = `
        <p>${currentQ + 1}. ${questionText}</p>
        ${options.map((opt, index) => `<label><input type="radio" name="option" value="${index}"> ${opt}</label>`).join('')}
    `;
}

// Global function for language switching (called from HTML)
window.updateQuizLanguage = async function(lang) {
    currentLanguage = lang;
    if (questions.length === 0) {
        await fetchQuestions(lang);
    }
    if (window.currentQuestions && window.currentQuestionIndex !== undefined) {
        const currentQuestion = window.currentQuestions[window.currentQuestionIndex];
        if (currentQuestion) {
            displayQuestion(currentQuestion, lang);
        }
    }
};

function displayResults() {
    const currentLang = localStorage.getItem('selectedLanguage') || 'en';
    const percentage = Math.round((score / questions.length) * 100);
    
    const resultText = currentLang === 'hi' 
        ? `‚úÖ ‡§Ü‡§™‡§®‡•á ${questions.length} ‡§Æ‡•á‡§Ç ‡§∏‡•á ${score} ‡§Ö‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§è`
        : `‚úÖ You scored ${score} out of ${questions.length}`;
    
    document.getElementById("result-text").textContent = resultText;
    
    const scoreDisplay = document.getElementById("score-display");
    scoreDisplay.innerHTML = `
        <div class="score-percentage">${percentage}%</div>
        <div class="score-bar">
            <div class="score-fill" style="width: ${percentage}%"></div>
        </div>
        <div class="score-level">
            ${getScoreLevel(percentage, currentLang)}
        </div>
    `;
}

function getScoreLevel(percentage, lang = 'en') {
    if (lang === 'hi') {
        if (percentage >= 90) return "üéØ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•ç‡§§‡§∞";
        if (percentage >= 70) return "üöÄ ‡§â‡§®‡•ç‡§®‡§§ ‡§∏‡•ç‡§§‡§∞";
        if (percentage >= 50) return "üìö ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•ç‡§§‡§∞";
        if (percentage >= 30) return "üî∞ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä ‡§∏‡•ç‡§§‡§∞";
        return "üå± ‡§®‡•å‡§∏‡§ø‡§ñ‡§ø‡§Ø‡§æ ‡§∏‡•ç‡§§‡§∞";
    } else {
        if (percentage >= 90) return "üéØ Expert Level";
        if (percentage >= 70) return "üöÄ Advanced Level";
        if (percentage >= 50) return "üìö Intermediate Level";
        if (percentage >= 30) return "üî∞ Beginner Level";
        return "üå± Novice Level";
    }
}

function performSkillGapAnalysis() {
    // Analyze performance by skill category
    const skillAnalysis = {};
    const difficultyAnalysis = {};
    
    userAnswers.forEach(answer => {
        const skill = answer.skill;
        const difficulty = answer.difficulty;
        
        if (!skillAnalysis[skill]) {
            skillAnalysis[skill] = { correct: 0, total: 0 };
        }
        if (!difficultyAnalysis[difficulty]) {
            difficultyAnalysis[difficulty] = { correct: 0, total: 0 };
        }
        
        skillAnalysis[skill].total++;
        difficultyAnalysis[difficulty].total++;
        
        if (answer.isCorrect) {
            skillAnalysis[skill].correct++;
            difficultyAnalysis[difficulty].correct++;
        }
    });
    
    // Calculate percentages
    Object.keys(skillAnalysis).forEach(skill => {
        skillAnalysis[skill].percentage = Math.round((skillAnalysis[skill].correct / skillAnalysis[skill].total) * 100);
    });
    
    Object.keys(difficultyAnalysis).forEach(difficulty => {
        difficultyAnalysis[difficulty].percentage = Math.round((difficultyAnalysis[difficulty].correct / difficultyAnalysis[difficulty].total) * 100);
    });
    
    displayAnalysis(skillAnalysis, difficultyAnalysis);
    generateRecommendations(skillAnalysis, difficultyAnalysis);
}

function displayAnalysis(skillAnalysis, difficultyAnalysis) {
    const currentLang = localStorage.getItem('selectedLanguage') || 'en';
    const analysisContent = document.getElementById("analysis-content");
    
    let analysisHTML = '<div class="analysis-grid">';
    
    // Skill-based analysis
    const skillTitle = currentLang === 'hi' ? 'üìä ‡§ï‡•å‡§∂‡§≤ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®' : 'üìä Skill Performance';
    analysisHTML += '<div class="analysis-section">';
    analysisHTML += `<h3>${skillTitle}</h3>`;
    
    Object.keys(skillAnalysis).forEach(skill => {
        const data = skillAnalysis[skill];
        const strength = data.percentage >= 70 ? 'strong' : data.percentage >= 50 ? 'moderate' : 'weak';
        const emoji = data.percentage >= 70 ? '‚úÖ' : data.percentage >= 50 ? '‚ö†Ô∏è' : '‚ùå';
        
        analysisHTML += `
            <div class="skill-item ${strength}">
                <div class="skill-header">
                    <span>${emoji} ${skill}</span>
                    <span class="skill-score">${data.percentage}%</span>
                </div>
                <div class="skill-bar">
                    <div class="skill-fill ${strength}" style="width: ${data.percentage}%"></div>
                </div>
                <div class="skill-details">${data.correct}/${data.total} correct</div>
            </div>
        `;
    });
    
    analysisHTML += '</div>';
    
    // Difficulty-based analysis
    const difficultyTitle = currentLang === 'hi' ? 'üéØ ‡§ï‡§†‡§ø‡§®‡§æ‡§à ‡§∏‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®' : 'üéØ Difficulty Level Performance';
    analysisHTML += '<div class="analysis-section">';
    analysisHTML += `<h3>${difficultyTitle}</h3>`;
    
    Object.keys(difficultyAnalysis).forEach(difficulty => {
        const data = difficultyAnalysis[difficulty];
        const strength = data.percentage >= 70 ? 'strong' : data.percentage >= 50 ? 'moderate' : 'weak';
        const emoji = data.percentage >= 70 ? '‚úÖ' : data.percentage >= 50 ? '‚ö†Ô∏è' : '‚ùå';
        
        analysisHTML += `
            <div class="difficulty-item ${strength}">
                <div class="difficulty-header">
                    <span>${emoji} ${difficulty}</span>
                    <span class="difficulty-score">${data.percentage}%</span>
                </div>
                <div class="difficulty-bar">
                    <div class="difficulty-fill ${strength}" style="width: ${data.percentage}%"></div>
                </div>
                <div class="difficulty-details">${data.correct}/${data.total} correct</div>
            </div>
        `;
    });
    
    analysisHTML += '</div></div>';
    
    analysisContent.innerHTML = analysisHTML;
}

function generateRecommendations(skillAnalysis, difficultyAnalysis) {
    const currentLang = localStorage.getItem('selectedLanguage') || 'en';
    const recommendationsDiv = document.getElementById("recommendations");
    const recommendationsTitle = currentLang === 'hi' ? 'üí° ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç' : 'üí° Personalized Recommendations';
    let recommendationsHTML = `<h3>${recommendationsTitle}</h3>`;
    
    // Identify weak areas
    const weakSkills = Object.keys(skillAnalysis).filter(skill => skillAnalysis[skill].percentage < 50);
    const weakDifficulties = Object.keys(difficultyAnalysis).filter(difficulty => difficultyAnalysis[difficulty].percentage < 50);
    
    recommendationsHTML += '<div class="recommendations-list">';
    
    if (weakSkills.length > 0) {
        const skillsTitle = currentLang === 'hi' ? 'üîß ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•å‡§∂‡§≤' : 'üîß Skills to Improve';
        recommendationsHTML += '<div class="recommendation-category">';
        recommendationsHTML += `<h4>${skillsTitle}</h4>`;
        weakSkills.forEach(skill => {
            recommendationsHTML += `<div class="recommendation-item">
                <strong>${skill}:</strong> ${getSkillRecommendations(skill, currentLang)}
            </div>`;
        });
        recommendationsHTML += '</div>';
    }
    
    if (weakDifficulties.length > 0) {
        const difficultyTitle = currentLang === 'hi' ? 'üìà ‡§ï‡§†‡§ø‡§®‡§æ‡§à ‡§∏‡•ç‡§§‡§∞ ‡§´‡•ã‡§ï‡§∏' : 'üìà Difficulty Level Focus';
        recommendationsHTML += '<div class="recommendation-category">';
        recommendationsHTML += `<h4>${difficultyTitle}</h4>`;
        weakDifficulties.forEach(difficulty => {
            recommendationsHTML += `<div class="recommendation-item">
                <strong>${difficulty} Level:</strong> ${getDifficultyRecommendations(difficulty, currentLang)}
            </div>`;
        });
        recommendationsHTML += '</div>';
    }
    
    // Overall recommendations
    const overallScore = Math.round((score / questions.length) * 100);
    const nextStepsTitle = currentLang === 'hi' ? 'üéØ ‡§Ö‡§ó‡§≤‡•á ‡§ï‡§¶‡§Æ' : 'üéØ Next Steps';
    recommendationsHTML += '<div class="recommendation-category">';
    recommendationsHTML += `<h4>${nextStepsTitle}</h4>`;
    recommendationsHTML += `<div class="recommendation-item">${getOverallRecommendations(overallScore, currentLang)}</div>`;
    recommendationsHTML += '</div>';
    
    recommendationsHTML += '</div>';
    recommendationsDiv.innerHTML = recommendationsHTML;
}

function getSkillRecommendations(skill, lang = 'en') {
    const recommendations = {
        "Web Fundamentals": {
            en: "Focus on understanding URLs, HTTP protocols, and basic web concepts. Practice with browser developer tools.",
            hi: "URL, HTTP ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤ ‡§î‡§∞ ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§µ‡•á‡§¨ ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡•§ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§°‡•á‡§µ‡§≤‡§™‡§∞ ‡§ü‡•Ç‡§≤ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        },
        "Cybersecurity": {
            en: "Learn about secure connections (HTTPS), password security, and common online threats. Consider cybersecurity courses.",
            hi: "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® (HTTPS), ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§ñ‡§§‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡•á‡§Ç‡•§ ‡§∏‡§æ‡§á‡§¨‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§™‡§æ‡§†‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§"
        }
    };
    
    const recommendation = recommendations[skill];
    if (recommendation) {
        return recommendation[lang] || recommendation.en;
    }
    return lang === 'hi' ? "‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§î‡§∞ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§á‡§∏ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡•§" : "Focus on this area through practice and study.";
}

function getDifficultyRecommendations(difficulty, lang = 'en') {
    const recommendations = {
        "Basic": {
            en: "Start with fundamental concepts and build a strong foundation before moving to advanced topics.",
            hi: "‡§â‡§®‡•ç‡§®‡§§ ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ú‡§æ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§è‡§ï ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§Ü‡§ß‡§æ‡§∞ ‡§¨‡§®‡§æ‡§è‡§Ç‡•§"
        },
        "Intermediate": {
            en: "Practice with real-world scenarios and hands-on exercises to strengthen your understanding.",
            hi: "‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§ù ‡§ï‡•ã ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§™‡§∞‡§ø‡§¶‡•É‡§∂‡•ç‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§π‡§æ‡§•‡•ã‡§Ç-‡§π‡§æ‡§• ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        }
    };
    
    const recommendation = recommendations[difficulty];
    if (recommendation) {
        return recommendation[lang] || recommendation.en;
    }
    return lang === 'hi' ? "‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§á‡§∏ ‡§ï‡§†‡§ø‡§®‡§æ‡§à ‡§∏‡•ç‡§§‡§∞ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡•§" : "Focus on this difficulty level through targeted practice.";
}

function getOverallRecommendations(overallScore, lang = 'en') {
    if (lang === 'hi') {
        if (overallScore >= 90) {
            return "‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®! ‡§Ö‡§™‡§®‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ ‡§ï‡•ã ‡§î‡§∞ ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§®‡•ç‡§®‡§§ ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§™‡§§‡•ç‡§∞‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§";
        } else if (overallScore >= 70) {
            return "‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§®‡•Ä‡§Ç‡§µ! ‡§Ö‡§™‡§®‡•á ‡§ï‡§Æ‡§ú‡•ã‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§ï‡•å‡§∂‡§≤ ‡§ï‡•ã ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•á ‡§™‡§æ‡§†‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§";
        } else if (overallScore >= 50) {
            return "‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§∏‡§Æ‡§ù ‡§π‡•à‡•§ ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§Ü‡§ß‡§æ‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä-‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§™‡§æ‡§†‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§";
        } else {
            return "‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§æ‡§ï‡•ç‡§∑‡§∞‡§§‡§æ ‡§™‡§æ‡§†‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡•ã‡§Ç ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§Ö‡§™‡§®‡§æ ‡§ú‡•ç‡§û‡§æ‡§® ‡§¨‡§®‡§æ‡§è‡§Ç‡•§ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®‡•ã‡§Ç ‡§î‡§∞ ‡§ü‡•ç‡§Ø‡•Ç‡§ü‡•ã‡§∞‡§ø‡§Ø‡§≤ ‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ï‡•ã‡§ö ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§";
        }
    } else {
        if (overallScore >= 90) {
            return "Excellent performance! Consider advanced topics and specialized certifications to further enhance your expertise.";
        } else if (overallScore >= 70) {
            return "Good foundation! Focus on your weak areas and consider intermediate-level courses to strengthen your skills.";
        } else if (overallScore >= 50) {
            return "You have a basic understanding. Focus on fundamental concepts and consider beginner-friendly courses to build a stronger foundation.";
        } else {
            return "Start with basic digital literacy courses and gradually build your knowledge. Don't hesitate to seek help from online resources and tutorials.";
        }
    }
}

function resetQuiz() {
    currentQ = 0;
    score = 0;
    userAnswers = [];
    skillPerformance = {};
    window.currentQuestionIndex = currentQ;
    quizStartTime = null;
}

// Initialize on page load
window.addEventListener('load', async function() {
    const savedLanguage = localStorage.getItem('selectedLanguage') || 'en';
    document.getElementById('language-select').value = savedLanguage;
    currentLanguage = savedLanguage;
    
    // Load current user ID if exists
    currentUserId = localStorage.getItem('currentUserId');
    
    // Load questions for the current language
    await fetchQuestions(currentLanguage);
});
